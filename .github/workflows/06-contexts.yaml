---
name: 06 - Contexts
# It uses the 'debug' input from the workflow_dispatch trigger.
run-name: 06 - Contexts | DEBUG - ${{ inputs.debug }}

on:
  # push
  workflow_dispatch:
    # Defines input parameters for the manual trigger.
    inputs:
      debug:
        type: boolean
        default: false

# Environment variables available to all jobs and steps in the workflow.
env:
  MY_WORKFLOW_VAR: 'workflow'
  MY_OVERWRITTEN_VAR: 'workflow'

jobs:
  echo-data:
    runs-on: ubuntu-latest
    # Environment variables available only to this job and its steps.
    # Note: MY_OVERWRITTEN_VAR here overrides the workflow-level variable.
    env:
      MY_JOB_VAR: 'job'
      MY_OVERWRITTEN_VAR: 'job'
    steps:
      # The 'github' context contains information about the workflow run and the event that triggered it.
      - name: Display information
        run: |
          echo "Event Name: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "SHA: ${{ github.sha }}"
          echo "Actor: ${{ github.actor }}"
          echo "Workflow: ${{ github.workflow }}"
          echo "Run ID: ${{ github.run_id }}"
          echo "Run number: ${{ github.run_number }}"
      # This step retrieves a variable defined at the repository or organization level.
      # These variables are accessed via the 'vars' context.
      - name: Retrieve Variable
        run: |
          echo "Variable value: ${{ vars.MY_VAR }}"
      # This step demonstrates environment variable precedence.
      - name: Print Env Variables
        # A step-level environment variable. This will override any job or workflow-level
        # variables with the same name for the duration of this step.
        env:
          MY_OVERWRITTEN_VAR: 'step'
        run: |
          # ${{ env.MY_WORKFLOW_VAR }} will resolve to 'workflow'.
          echo "Workflow env: ${{ env.MY_WORKFLOW_VAR }}"
          # ${{ env.MY_OVERWRITTEN_VAR }} will resolve to 'step' because of the step-level override.
          echo "Overwritten env: ${{ env.MY_OVERWRITTEN_VAR }}"
      # This step shows that the step-level 'env' from the previous step is no longer in effect.
      - name: Print Env Variables
        run: |
          # ${{ env.MY_WORKFLOW_VAR }} will still resolve to 'workflow'.
          echo "Workflow env: ${{ env.MY_WORKFLOW_VAR }}"
          # ${{ env.MY_OVERWRITTEN_VAR }} will now resolve to 'job', the job-level value.
          echo "Overwritten env: ${{ env.MY_OVERWRITTEN_VAR }}"

  echo-data2:
    runs-on: ubuntu-latest
    steps:
      # This step demonstrates accessing environment variables directly within the shell.
      - name: Print Env Variables
        run: |
          # $MY_WORKFLOW_VAR accesses the workflow-level variable.
          echo "Workflow env: $MY_WORKFLOW_VAR"
          # $MY_OVERWRITTEN_VAR also accesses the workflow-level variable, as the
          # job-level override from 'echo-data' job does not apply to this job.
          echo "Overwritten env: $MY_OVERWRITTEN_VAR"
